{"ast":null,"code":"var _jsxFileName = \"/home/coder-kabir/Documents/GitHub/Vemshala/src/component/SignupModal/SignupModal.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport { Button, Form, Input, message } from \"antd\";\nimport { Redirect, useLocation } from 'react-router-dom';\n/* CUSTOM COMPONENT */\n\nimport { SgnModal } from \"./SignupModalStyle\";\n/* ACTION */\n\nimport { toggleSignupModal, setUserLoggedIn, setCustomerData } from \"../../action/generalAction\";\nimport { createCustomer, createCustomerReset } from \"../../action/createCustomerAction\";\n/* OTHER */\n\nimport { setToken, setCustomer } from \"../../utils\";\n\nconst SignupModal = props => {\n  /* VARIABLE & STATE */\n  const {\n    toggleSignupModal,\n    setUserLoggedIn,\n    setCustomerData,\n    generalState,\n    createCustomer,\n    createCustomerReset,\n    createCustomerState\n  } = props;\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    signup_method: \"website\",\n    id_token: \"\"\n  });\n  const location = useLocation();\n  const [redirect, setRedirect] = useState([false, '']);\n  /* CALLBACK */\n  // useEffect(() => {\n  //     if (createCustomerState.apiState === \"error\") {\n  //         message.error(createCustomerState.message);\n  //         // message.error(\"Something went wrong. Please try later\");\n  //     }\n  //     if (createCustomerState.apiState === \"success\") {\n  //         // message.success(createCustomerState.message);\n  //         setFormData({\n  //             name: \"\",\n  //             email: \"\",\n  //             password: \"\",\n  //             signup_method: \"website\",\n  //             id_token: \"\"\n  //         })\n  //         setToken(createCustomerState.token)\n  //         if (createCustomerState.customer.signup_method === \"website\") {\n  //             // toggleSignupModal()\n  //         }\n  //         setUserLoggedIn()\n  //         setCustomer(createCustomerState.customer)\n  //         setCustomerData({\n  //             customer: createCustomerState.customer\n  //         })\n  //         createCustomerReset()\n  //         if (location.pathname === \"/checkout/login\") {\n  //             setRedirect([true, '/checkout/billing'])\n  //         }\n  //     }\n  // }, [createCustomerState])\n\n  /* FUNCTION */\n\n  const handleInputChange = e => {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = () => {\n    if (formData.contact_no.length < 10) {\n      return alert('please enter valid contact no');\n    }\n\n    createCustomer(formData);\n  };\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, redirect[0] && /*#__PURE__*/React.createElement(Redirect, {\n    to: redirect[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(SgnModal, {\n    title: \"Create an account with us\",\n    visible: generalState.signupModalVisible,\n    footer: null,\n    onCancel: () => {\n      form.resetFields();\n      toggleSignupModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    id: \"signUpModal\",\n    name: \"name\",\n    label: \"Full Name\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"name\",\n    size: \"large\",\n    placeholder: \"Enter Full Name\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"email\",\n    label: \"Email\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }, {\n      type: 'email',\n      message: 'Email is not valid'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"email\",\n    size: \"large\",\n    placeholder: \"Enter Email\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"contact_no\",\n    label: \"Contact Number\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"contact_no\",\n    size: \"large\",\n    placeholder: \"Enter Contact No\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"password\",\n    label: \"Set Password\",\n    rules: [{\n      required: true,\n      message: 'Required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input.Password, {\n    name: \"password\",\n    size: \"large\",\n    placeholder: \"Enter New Password\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    size: \"large\",\n    loading: createCustomerState.apiState === \"loading\",\n    htmlType: \"submit\",\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, \"CREATE ACCOUNT\"))));\n};\n\nconst mapStateToProps = state => ({\n  generalState: state.general,\n  createCustomerState: state.createCustomer\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleSignupModal: () => dispatch(toggleSignupModal()),\n  setUserLoggedIn: () => dispatch(setUserLoggedIn()),\n  createCustomer: params => dispatch(createCustomer(params)),\n  createCustomerReset: () => dispatch(createCustomerReset()),\n  setCustomerData: params => dispatch(setCustomerData(params))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupModal);","map":{"version":3,"sources":["/home/coder-kabir/Documents/GitHub/Vemshala/src/component/SignupModal/SignupModal.js"],"names":["React","useState","useEffect","connect","Button","Form","Input","message","Redirect","useLocation","SgnModal","toggleSignupModal","setUserLoggedIn","setCustomerData","createCustomer","createCustomerReset","setToken","setCustomer","SignupModal","props","generalState","createCustomerState","formData","setFormData","name","email","password","signup_method","id_token","location","redirect","setRedirect","handleInputChange","e","target","value","handleSubmit","contact_no","length","alert","form","useForm","signupModalVisible","resetFields","required","type","apiState","mapStateToProps","state","general","mapDispatchToProps","dispatch","params"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,OAA9B,QAA6C,MAA7C;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;AAEA;;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA;;AACA,SAASC,iBAAT,EAA4BC,eAA5B,EAA6CC,eAA7C,QAAoE,4BAApE;AACA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,mCAApD;AAEA;;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AACzB;AACA,QAAM;AACFR,IAAAA,iBADE;AACiBC,IAAAA,eADjB;AACkCC,IAAAA,eADlC;AACmDO,IAAAA,YADnD;AAEFN,IAAAA,cAFE;AAEcC,IAAAA,mBAFd;AAEmCM,IAAAA;AAFnC,MAGFF,KAHJ;AAIA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC;AACrCuB,IAAAA,IAAI,EAAE,EAD+B;AAErCC,IAAAA,KAAK,EAAE,EAF8B;AAGrCC,IAAAA,QAAQ,EAAE,EAH2B;AAIrCC,IAAAA,aAAa,EAAE,SAJsB;AAKrCC,IAAAA,QAAQ,EAAE;AAL2B,GAAD,CAAxC;AAOA,QAAMC,QAAQ,GAAGpB,WAAW,EAA5B;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0B9B,QAAQ,CAAC,CAAC,KAAD,EAAQ,EAAR,CAAD,CAAxC;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA,QAAM+B,iBAAiB,GAAIC,CAAD,IAAO;AAC7BV,IAAAA,WAAW,CAAC,EACR,GAAGD,QADK;AAER,OAACW,CAAC,CAACC,MAAF,CAASV,IAAV,GAAiBS,CAAC,CAACC,MAAF,CAASC;AAFlB,KAAD,CAAX;AAIH,GALD;;AAOA,QAAMC,YAAY,GAAG,MAAM;AAEvB,QAAGd,QAAQ,CAACe,UAAT,CAAoBC,MAApB,GAA6B,EAAhC,EAAoC;AAAE,aAAOC,KAAK,CAAC,+BAAD,CAAZ;AAA+C;;AAErFzB,IAAAA,cAAc,CAACQ,QAAD,CAAd;AACH,GALD;;AAOA,QAAM,CAACkB,IAAD,IAASnC,IAAI,CAACoC,OAAL,EAAf;AACA,sBACI,0CACKX,QAAQ,CAAC,CAAD,CAAR,iBACG,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAEA,QAAQ,CAAC,CAAD,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,eAGI,oBAAC,QAAD;AACI,IAAA,KAAK,EAAC,2BADV;AAEI,IAAA,OAAO,EAAEV,YAAY,CAACsB,kBAF1B;AAGI,IAAA,MAAM,EAAE,IAHZ;AAII,IAAA,QAAQ,EAAE,MAAM;AACZF,MAAAA,IAAI,CAACG,WAAL;AACAhC,MAAAA,iBAAiB;AAAG,KAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE6B,IAAZ;AAAkB,IAAA,MAAM,EAAC,UAAzB;AAAoC,IAAA,QAAQ,EAAEJ,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,EAAE,EAAC,aADP;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,KAAK,EAAC,WAHV;AAII,IAAA,KAAK,EAAE,CACH;AAAEQ,MAAAA,QAAQ,EAAE,IAAZ;AAAkBrC,MAAAA,OAAO,EAAE;AAA3B,KADG,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,WAAW,EAAC,iBAA5C;AACI,IAAA,QAAQ,EAAEyB,iBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADJ,eAaI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,KAAK,EAAC,OAFV;AAGI,IAAA,KAAK,EAAE,CACH;AAAEY,MAAAA,QAAQ,EAAE,IAAZ;AAAkBrC,MAAAA,OAAO,EAAE;AAA3B,KADG,EAEH;AAAEsC,MAAAA,IAAI,EAAE,OAAR;AAAiBtC,MAAAA,OAAO,EAAE;AAA1B,KAFG,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,IAAI,EAAC,OAAzB;AAAiC,IAAA,WAAW,EAAC,aAA7C;AACI,IAAA,QAAQ,EAAEyB,iBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CAbJ,eA0BI,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,IAAI,EAAC,YAAhB;AAA6B,IAAA,KAAK,EAAC,gBAAnC;AAAoD,IAAA,KAAK,EAAE,CAAC;AAAEY,MAAAA,QAAQ,EAAE,IAAZ;AAAkBrC,MAAAA,OAAO,EAAE;AAA3B,KAAD,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,YAAZ;AAAyB,IAAA,IAAI,EAAC,OAA9B;AAAsC,IAAA,WAAW,EAAC,kBAAlD;AAAqE,IAAA,QAAQ,EAAEyB,iBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CA1BJ,eA8BI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,KAAK,EAAC,cAFV;AAGI,IAAA,KAAK,EAAE,CACH;AAAEY,MAAAA,QAAQ,EAAE,IAAZ;AAAkBrC,MAAAA,OAAO,EAAE;AAA3B,KADG,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI,oBAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAC,UAArB;AAAgC,IAAA,IAAI,EAAC,OAArC;AAA6C,IAAA,WAAW,EAAC,oBAAzD;AACI,IAAA,QAAQ,EAAEyB,iBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CA9BJ,eAyCI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,IAAI,EAAC,OAA5B;AAAoC,IAAA,OAAO,EAAEX,mBAAmB,CAACyB,QAApB,KAAiC,SAA9E;AAAyF,IAAA,QAAQ,EAAC,QAAlG;AAA2G,IAAA,KAAK,MAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAzCJ,CARJ,CAHJ,CADJ;AA0DH,CA1HD;;AA4HA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAChC5B,EAAAA,YAAY,EAAE4B,KAAK,CAACC,OADY;AAEhC5B,EAAAA,mBAAmB,EAAE2B,KAAK,CAAClC;AAFK,CAAZ,CAAxB;;AAIA,MAAMoC,kBAAkB,GAAIC,QAAD,KAAe;AACtCxC,EAAAA,iBAAiB,EAAE,MAAMwC,QAAQ,CAACxC,iBAAiB,EAAlB,CADK;AAEtCC,EAAAA,eAAe,EAAE,MAAMuC,QAAQ,CAACvC,eAAe,EAAhB,CAFO;AAGtCE,EAAAA,cAAc,EAAGsC,MAAD,IAAYD,QAAQ,CAACrC,cAAc,CAACsC,MAAD,CAAf,CAHE;AAItCrC,EAAAA,mBAAmB,EAAE,MAAMoC,QAAQ,CAACpC,mBAAmB,EAApB,CAJG;AAKtCF,EAAAA,eAAe,EAAGuC,MAAD,IAAYD,QAAQ,CAACtC,eAAe,CAACuC,MAAD,CAAhB;AALC,CAAf,CAA3B;;AAQA,eAAejD,OAAO,CAAC4C,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ChC,WAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from \"react-redux\"\nimport { Button, Form, Input, message } from \"antd\"\nimport { Redirect, useLocation } from 'react-router-dom'\n\n/* CUSTOM COMPONENT */\nimport { SgnModal } from \"./SignupModalStyle\"\n\n/* ACTION */\nimport { toggleSignupModal, setUserLoggedIn, setCustomerData } from \"../../action/generalAction\"\nimport { createCustomer, createCustomerReset } from \"../../action/createCustomerAction\"\n\n/* OTHER */\nimport { setToken, setCustomer } from \"../../utils\"\n\nconst SignupModal = props => {\n    /* VARIABLE & STATE */\n    const {\n        toggleSignupModal, setUserLoggedIn, setCustomerData, generalState,\n        createCustomer, createCustomerReset, createCustomerState,\n    } = props\n    const [formData, setFormData] = useState({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        signup_method: \"website\",\n        id_token: \"\"\n    })\n    const location = useLocation();\n    const [redirect, setRedirect] = useState([false, ''])\n\n    /* CALLBACK */\n    // useEffect(() => {\n    //     if (createCustomerState.apiState === \"error\") {\n    //         message.error(createCustomerState.message);\n\n    //         // message.error(\"Something went wrong. Please try later\");\n    //     }\n    //     if (createCustomerState.apiState === \"success\") {\n    //         // message.success(createCustomerState.message);\n    //         setFormData({\n    //             name: \"\",\n    //             email: \"\",\n    //             password: \"\",\n    //             signup_method: \"website\",\n    //             id_token: \"\"\n    //         })\n    //         setToken(createCustomerState.token)\n    //         if (createCustomerState.customer.signup_method === \"website\") {\n    //             // toggleSignupModal()\n    //         }\n    //         setUserLoggedIn()\n    //         setCustomer(createCustomerState.customer)\n    //         setCustomerData({\n    //             customer: createCustomerState.customer\n    //         })\n    //         createCustomerReset()\n    //         if (location.pathname === \"/checkout/login\") {\n    //             setRedirect([true, '/checkout/billing'])\n    //         }\n    //     }\n    // }, [createCustomerState])\n\n    /* FUNCTION */\n    const handleInputChange = (e) => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = () => {\n\n        if(formData.contact_no.length < 10) { return alert('please enter valid contact no') }\n\n        createCustomer(formData)\n    }\n\n    const [form] = Form.useForm();\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n            <SgnModal\n                title=\"Create an account with us\"\n                visible={generalState.signupModalVisible}\n                footer={null}\n                onCancel={() => {\n                    form.resetFields();\n                    toggleSignupModal()}}\n            >\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n                    <Form.Item\n                        id='signUpModal'\n                        name=\"name\"\n                        label=\"Full Name\"\n                        rules={[\n                            { required: true, message: 'Required' },\n                        ]}\n                    >\n                        <Input name=\"name\" size=\"large\" placeholder=\"Enter Full Name\"\n                            onChange={handleInputChange}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"email\"\n                        label=\"Email\"\n                        rules={[\n                            { required: true, message: 'Required' },\n                            { type: 'email', message: 'Email is not valid' },\n                        ]}\n                    >\n                        <Input name=\"email\" size=\"large\" placeholder=\"Enter Email\"\n                            onChange={handleInputChange}\n                        />\n                    </Form.Item>\n\n                    <Form.Item name=\"contact_no\" label=\"Contact Number\" rules={[{ required: true, message: 'Required' }]}>\n                        <Input name=\"contact_no\" size=\"large\" placeholder=\"Enter Contact No\" onChange={handleInputChange}/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"password\"\n                        label=\"Set Password\"\n                        rules={[\n                            { required: true, message: 'Required' },\n                        ]}\n                    >\n                        <Input.Password name=\"password\" size=\"large\" placeholder=\"Enter New Password\"\n                            onChange={handleInputChange}\n                        />\n                    </Form.Item>\n                    <Button type=\"primary\" size=\"large\" loading={createCustomerState.apiState === \"loading\"} htmlType=\"submit\" block >CREATE ACCOUNT</Button>\n                </Form>\n            </SgnModal>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    generalState: state.general,\n    createCustomerState: state.createCustomer,\n})\nconst mapDispatchToProps = (dispatch) => ({\n    toggleSignupModal: () => dispatch(toggleSignupModal()),\n    setUserLoggedIn: () => dispatch(setUserLoggedIn()),\n    createCustomer: (params) => dispatch(createCustomer(params)),\n    createCustomerReset: () => dispatch(createCustomerReset()),\n    setCustomerData: (params) => dispatch(setCustomerData(params)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupModal)\n"]},"metadata":{},"sourceType":"module"}