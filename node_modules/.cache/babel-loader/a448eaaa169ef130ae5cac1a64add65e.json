{"ast":null,"code":"import _defineProperty from\"/home/coder-kabir/Documents/GitHub/Vemshala/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/coder-kabir/Documents/GitHub/Vemshala/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/coder-kabir/Documents/GitHub/Vemshala/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{connect}from\"react-redux\";import{Button,Form,Input,message}from\"antd\";import{Redirect,useLocation}from'react-router-dom';/* CUSTOM COMPONENT */import{SgnModal}from\"./SignupModalStyle\";/* ACTION */import{toggleSignupModal as _toggleSignupModal,setUserLoggedIn as _setUserLoggedIn,setCustomerData as _setCustomerData}from\"../../action/generalAction\";import{createCustomer as _createCustomer,createCustomerReset as _createCustomerReset}from\"../../action/createCustomerAction\";/* OTHER */import{setToken,setCustomer}from\"../../utils\";var SignupModal=function SignupModal(props){/* VARIABLE & STATE */var toggleSignupModal=props.toggleSignupModal,setUserLoggedIn=props.setUserLoggedIn,setCustomerData=props.setCustomerData,generalState=props.generalState,createCustomer=props.createCustomer,createCustomerReset=props.createCustomerReset,createCustomerState=props.createCustomerState;var _useState=useState({name:\"\",email:\"\",password:\"\",signup_method:\"website\",id_token:\"\"}),_useState2=_slicedToArray(_useState,2),formData=_useState2[0],setFormData=_useState2[1];var location=useLocation();var _useState3=useState([false,'']),_useState4=_slicedToArray(_useState3,2),redirect=_useState4[0],setRedirect=_useState4[1];/* CALLBACK */ // useEffect(() => {\n//     if (createCustomerState.apiState === \"error\") {\n//         message.error(createCustomerState.message);\n//         // message.error(\"Something went wrong. Please try later\");\n//     }\n//     if (createCustomerState.apiState === \"success\") {\n//         // message.success(createCustomerState.message);\n//         setFormData({\n//             name: \"\",\n//             email: \"\",\n//             password: \"\",\n//             signup_method: \"website\",\n//             id_token: \"\"\n//         })\n//         setToken(createCustomerState.token)\n//         if (createCustomerState.customer.signup_method === \"website\") {\n//             // toggleSignupModal()\n//         }\n//         setUserLoggedIn()\n//         setCustomer(createCustomerState.customer)\n//         setCustomerData({\n//             customer: createCustomerState.customer\n//         })\n//         createCustomerReset()\n//         if (location.pathname === \"/checkout/login\") {\n//             setRedirect([true, '/checkout/billing'])\n//         }\n//     }\n// }, [createCustomerState])\n/* FUNCTION */var handleInputChange=function handleInputChange(e){setFormData(_objectSpread(_objectSpread({},formData),{},_defineProperty({},e.target.name,e.target.value)));};var handleSubmit=function handleSubmit(){if(formData.contact_no.length<10){return alert('please enter valid contact no');}createCustomer(formData);};var _Form$useForm=Form.useForm(),_Form$useForm2=_slicedToArray(_Form$useForm,1),form=_Form$useForm2[0];return/*#__PURE__*/React.createElement(React.Fragment,null,redirect[0]&&/*#__PURE__*/React.createElement(Redirect,{to:redirect[1]}),/*#__PURE__*/React.createElement(SgnModal,{title:\"Create an account with us\",visible:generalState.signupModalVisible,footer:null,onCancel:function onCancel(){form.resetFields();toggleSignupModal();}},/*#__PURE__*/React.createElement(Form,{form:form,layout:\"vertical\",onFinish:handleSubmit},/*#__PURE__*/React.createElement(Form.Item,{id:\"signUpModal\",name:\"name\",label:\"Full Name\",rules:[{required:true,message:'Required'}]},/*#__PURE__*/React.createElement(Input,{name:\"name\",size:\"large\",placeholder:\"Enter Full Name\",onChange:handleInputChange})),/*#__PURE__*/React.createElement(Form.Item,{name:\"email\",label:\"Email\",rules:[{required:true,message:'Required'},{type:'email',message:'Email is not valid'}]},/*#__PURE__*/React.createElement(Input,{name:\"email\",size:\"large\",placeholder:\"Enter Email\",onChange:handleInputChange})),/*#__PURE__*/React.createElement(Form.Item,{name:\"contact_no\",label:\"Contact Number\",rules:[{required:true,message:'Required'}]},/*#__PURE__*/React.createElement(Input,{name:\"contact_no\",size:\"large\",placeholder:\"Enter Contact No\",onChange:handleInputChange})),/*#__PURE__*/React.createElement(Form.Item,{name:\"password\",label:\"Set Password\",rules:[{required:true,message:'Required'}]},/*#__PURE__*/React.createElement(Input.Password,{name:\"password\",size:\"large\",placeholder:\"Enter New Password\",onChange:handleInputChange})),/*#__PURE__*/React.createElement(Button,{type:\"primary\",size:\"large\",loading:createCustomerState.apiState===\"loading\",htmlType:\"submit\",block:true},\"CREATE ACCOUNT\"))));};var mapStateToProps=function mapStateToProps(state){return{generalState:state.general,createCustomerState:state.createCustomer};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{toggleSignupModal:function toggleSignupModal(){return dispatch(_toggleSignupModal());},setUserLoggedIn:function setUserLoggedIn(){return dispatch(_setUserLoggedIn());},createCustomer:function createCustomer(params){return dispatch(_createCustomer(params));},createCustomerReset:function createCustomerReset(){return dispatch(_createCustomerReset());},setCustomerData:function setCustomerData(params){return dispatch(_setCustomerData(params));}};};export default connect(mapStateToProps,mapDispatchToProps)(SignupModal);","map":{"version":3,"sources":["/home/coder-kabir/Documents/GitHub/Vemshala/src/component/SignupModal/SignupModal.js"],"names":["React","useState","useEffect","connect","Button","Form","Input","message","Redirect","useLocation","SgnModal","toggleSignupModal","setUserLoggedIn","setCustomerData","createCustomer","createCustomerReset","setToken","setCustomer","SignupModal","props","generalState","createCustomerState","name","email","password","signup_method","id_token","formData","setFormData","location","redirect","setRedirect","handleInputChange","e","target","value","handleSubmit","contact_no","length","alert","useForm","form","signupModalVisible","resetFields","required","type","apiState","mapStateToProps","state","general","mapDispatchToProps","dispatch","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from \"react-redux\"\nimport { Button, Form, Input, message } from \"antd\"\nimport { Redirect, useLocation } from 'react-router-dom'\n\n/* CUSTOM COMPONENT */\nimport { SgnModal } from \"./SignupModalStyle\"\n\n/* ACTION */\nimport { toggleSignupModal, setUserLoggedIn, setCustomerData } from \"../../action/generalAction\"\nimport { createCustomer, createCustomerReset } from \"../../action/createCustomerAction\"\n\n/* OTHER */\nimport { setToken, setCustomer } from \"../../utils\"\n\nconst SignupModal = props => {\n    /* VARIABLE & STATE */\n    const {\n        toggleSignupModal, setUserLoggedIn, setCustomerData, generalState,\n        createCustomer, createCustomerReset, createCustomerState,\n    } = props\n    const [formData, setFormData] = useState({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        signup_method: \"website\",\n        id_token: \"\"\n    })\n    const location = useLocation();\n    const [redirect, setRedirect] = useState([false, ''])\n\n    /* CALLBACK */\n    // useEffect(() => {\n    //     if (createCustomerState.apiState === \"error\") {\n    //         message.error(createCustomerState.message);\n\n    //         // message.error(\"Something went wrong. Please try later\");\n    //     }\n    //     if (createCustomerState.apiState === \"success\") {\n    //         // message.success(createCustomerState.message);\n    //         setFormData({\n    //             name: \"\",\n    //             email: \"\",\n    //             password: \"\",\n    //             signup_method: \"website\",\n    //             id_token: \"\"\n    //         })\n    //         setToken(createCustomerState.token)\n    //         if (createCustomerState.customer.signup_method === \"website\") {\n    //             // toggleSignupModal()\n    //         }\n    //         setUserLoggedIn()\n    //         setCustomer(createCustomerState.customer)\n    //         setCustomerData({\n    //             customer: createCustomerState.customer\n    //         })\n    //         createCustomerReset()\n    //         if (location.pathname === \"/checkout/login\") {\n    //             setRedirect([true, '/checkout/billing'])\n    //         }\n    //     }\n    // }, [createCustomerState])\n\n    /* FUNCTION */\n    const handleInputChange = (e) => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = () => {\n\n        if(formData.contact_no.length < 10) { return alert('please enter valid contact no') }\n\n        createCustomer(formData)\n    }\n\n    const [form] = Form.useForm();\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />}\n            <SgnModal\n                title=\"Create an account with us\"\n                visible={generalState.signupModalVisible}\n                footer={null}\n                onCancel={() => {\n                    form.resetFields();\n                    toggleSignupModal()}}\n            >\n                <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n                    <Form.Item\n                        id='signUpModal'\n                        name=\"name\"\n                        label=\"Full Name\"\n                        rules={[\n                            { required: true, message: 'Required' },\n                        ]}\n                    >\n                        <Input name=\"name\" size=\"large\" placeholder=\"Enter Full Name\"\n                            onChange={handleInputChange}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"email\"\n                        label=\"Email\"\n                        rules={[\n                            { required: true, message: 'Required' },\n                            { type: 'email', message: 'Email is not valid' },\n                        ]}\n                    >\n                        <Input name=\"email\" size=\"large\" placeholder=\"Enter Email\"\n                            onChange={handleInputChange}\n                        />\n                    </Form.Item>\n\n                    <Form.Item name=\"contact_no\" label=\"Contact Number\" rules={[{ required: true, message: 'Required' }]}>\n                        <Input name=\"contact_no\" size=\"large\" placeholder=\"Enter Contact No\" onChange={handleInputChange}/>\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"password\"\n                        label=\"Set Password\"\n                        rules={[\n                            { required: true, message: 'Required' },\n                        ]}\n                    >\n                        <Input.Password name=\"password\" size=\"large\" placeholder=\"Enter New Password\"\n                            onChange={handleInputChange}\n                        />\n                    </Form.Item>\n                    <Button type=\"primary\" size=\"large\" loading={createCustomerState.apiState === \"loading\"} htmlType=\"submit\" block >CREATE ACCOUNT</Button>\n                </Form>\n            </SgnModal>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    generalState: state.general,\n    createCustomerState: state.createCustomer,\n})\nconst mapDispatchToProps = (dispatch) => ({\n    toggleSignupModal: () => dispatch(toggleSignupModal()),\n    setUserLoggedIn: () => dispatch(setUserLoggedIn()),\n    createCustomer: (params) => dispatch(createCustomer(params)),\n    createCustomerReset: () => dispatch(createCustomerReset()),\n    setCustomerData: (params) => dispatch(setCustomerData(params)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupModal)\n"]},"metadata":{},"sourceType":"module"}