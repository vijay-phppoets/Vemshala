{"ast":null,"code":"var _jsxFileName = \"/home/kuldeep/Git Hub/Vemshala/src/page/ResetPassword/ResetPassword.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Space, Form, Input, Row, Col, Select, message } from \"antd\";\nimport { Link, Redirect } from \"react-router-dom\"; // custom component\n\nimport Footer from \"../../component/Footer/Footer\";\nimport { MainBox } from \"./ResetPasswordStyle\"; // action   \n\nimport { resetPassword, resetPasswordReset } from \"../../action/resetPasswordAction\";\n\nconst ResetPassword = props => {\n  // variables & states \n  const {\n    resetPassword,\n    resetPasswordReset,\n    resetPasswordState\n  } = props;\n  const customer_id = props.match.params.customer_id;\n  const [redirect, setRedirect] = useState(false, \"\");\n  const [otpScreen, setOtpScreen] = useState(false);\n  const [formData, setFormData] = useState({\n    password: \"\",\n    confirm: \"\"\n  }); // functions \n\n  const handleOnChange = e => {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleOnSubmit = () => {\n    resetPassword({\n      customer_id: customer_id,\n      ...formData\n    });\n  };\n\n  useEffect(() => {\n    if (resetPasswordState.apiState === \"success\") {\n      message.success(resetPasswordState.message);\n      setRedirect([true, '/']);\n      resetPasswordReset();\n    } else if (resetPasswordState.apiState === \"error\") {\n      message.error(\"Something went wrong. Please try later\");\n    }\n  }, [resetPasswordState]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, redirect[0] && /*#__PURE__*/React.createElement(Redirect, {\n    to: redirect[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      paddingTop: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      fontSize: 24,\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \"Reset Password\")), /*#__PURE__*/React.createElement(MainBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      background: \"white\",\n      marginBottom: 40,\n      padding: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onFinish: handleOnSubmit,\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"password\",\n    label: \"Password\",\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"password\",\n    placeholder: \"Enter Password\",\n    onChange: handleOnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    xs: 24,\n    sm: 24,\n    md: 24,\n    lg: 24,\n    xl: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"confirm\",\n    label: \"Confirm Password\",\n    dependencies: ['password'],\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(_, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(new Error('The passwords that you entered do not match!'));\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"confirm\",\n    placeholder: \"Confirm Password\",\n    onChange: handleOnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 41\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    loading: resetPasswordState.apiState === \"loading\",\n    block: true,\n    size: \"large\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 33\n    }\n  }, \"Set Password\")))))));\n};\n\nconst mapStateToProps = state => ({\n  resetPasswordState: state.resetPassword\n});\n\nconst mapDispatchToProps = dispatch => ({\n  resetPassword: params => dispatch(resetPassword(params)),\n  resetPasswordReset: () => dispatch(resetPasswordReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword);","map":{"version":3,"sources":["/home/kuldeep/Git Hub/Vemshala/src/page/ResetPassword/ResetPassword.js"],"names":["React","useEffect","useState","connect","Button","Space","Form","Input","Row","Col","Select","message","Link","Redirect","Footer","MainBox","resetPassword","resetPasswordReset","ResetPassword","props","resetPasswordState","customer_id","match","params","redirect","setRedirect","otpScreen","setOtpScreen","formData","setFormData","password","confirm","handleOnChange","e","target","name","value","handleOnSubmit","apiState","success","error","textAlign","paddingTop","fontSize","fontWeight","background","marginBottom","padding","required","getFieldValue","validator","_","Promise","resolve","reject","Error","display","justifyContent","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Button, Space, Form, Input, Row, Col, Select, message } from \"antd\"\nimport { Link, Redirect } from \"react-router-dom\"\n// custom component\nimport Footer from \"../../component/Footer/Footer\"\nimport { MainBox } from \"./ResetPasswordStyle\"\n// action   \nimport { resetPassword, resetPasswordReset } from \"../../action/resetPasswordAction\"\nconst ResetPassword = props => {\n    // variables & states \n    const {\n        resetPassword, resetPasswordReset, resetPasswordState,\n    } = props\n    const customer_id = props.match.params.customer_id\n    const [redirect, setRedirect] = useState(false, \"\")\n    const [otpScreen, setOtpScreen] = useState(false)\n    const [formData, setFormData] = useState({\n        password: \"\",\n        confirm: \"\",\n    })\n\n    // functions \n    const handleOnChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value })\n    }\n\n    const handleOnSubmit = () => {\n        resetPassword({\n            customer_id: customer_id,\n            ...formData\n        })\n    }\n    useEffect(() => {\n        if (resetPasswordState.apiState === \"success\") {\n            message.success(resetPasswordState.message);\n            setRedirect([true, '/'])\n            resetPasswordReset()\n        }\n        else if (resetPasswordState.apiState === \"error\") {\n            message.error(\"Something went wrong. Please try later\");\n        }\n    }, [resetPasswordState])\n\n    return (\n        <>\n            {redirect[0] &&\n                <Redirect to={redirect[1]} />\n            }\n            <div>\n                <div style={{ textAlign: \"center\", paddingTop: 16 }} >\n                    <h1 style={{ fontSize: 24, fontWeight: \"bold\" }} >Reset Password</h1>\n                </div>\n                <MainBox>\n\n                    <div style={{ background: \"white\", marginBottom: 40, padding: 16 }} >\n                        <Form onFinish={handleOnSubmit} layout=\"vertical\">\n                            <Row gutter=\"24\">\n                                <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                    <Form.Item\n                                        name=\"password\"\n                                        label=\"Password\"\n                                        rules={[\n                                            { required: true, message: 'Please input your password!' },\n                                        ]}\n                                    >\n                                        <Input name=\"password\" placeholder=\"Enter Password\"\n                                            onChange={handleOnChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                                    <Form.Item\n                                        name=\"confirm\"\n                                        label=\"Confirm Password\"\n                                        dependencies={['password']}\n                                        rules={[\n                                            { required: true, message: 'Please confirm your password!' },\n                                            ({ getFieldValue }) => ({\n                                                validator(_, value) {\n                                                    if (!value || getFieldValue('password') === value) {\n                                                        return Promise.resolve();\n                                                    }\n                                                    return Promise.reject(new Error('The passwords that you entered do not match!'));\n                                                },\n                                            }),\n                                        ]}\n                                    >\n                                        <Input name=\"confirm\" placeholder=\"Confirm Password\"\n                                            onChange={handleOnChange}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n                            <div style={{ display: \"flex\", justifyContent: \"center\" }} >\n                                <Button type=\"primary\" loading={resetPasswordState.apiState === \"loading\"} block size=\"large\" htmlType=\"submit\"\n                                >Set Password</Button>\n                            </div>\n                        </Form>\n                    </div>\n\n                </MainBox>\n            </div>\n           \n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    resetPasswordState: state.resetPassword,\n})\nconst mapDispatchToProps = (dispatch) => ({\n    resetPassword: (params) => dispatch(resetPassword(params)),\n    resetPasswordReset: () => dispatch(resetPasswordReset()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword)\n"]},"metadata":{},"sourceType":"module"}